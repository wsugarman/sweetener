<#@ template hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ include file="$(SrcDirectory)TextTemplating\Include.t4" #><# PrintHeader(); #>

using System;
using System.Threading.Tasks;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Sweetener.Threading.Tasks.Test
{
    [TestClass]
    public class MultiTaskTest
    {
<#
        for (int parameterCount = 2; parameterCount <= Arguments.Count; parameterCount++)
        {
#>
        [TestMethod]
        public async Task WhenAllT<#= parameterCount #>()
        {
            // Bad Input
<#
            for (int i = 1; i <= parameterCount; i++)
            {
#>
            await Assert.ThrowsExceptionAsync<ArgumentNullException>(
                () => MultiTask.WhenAll(
<#
                for (int j = 1; j <= parameterCount; j++)
                {
                    string suffix = j == parameterCount ? ")).ConfigureAwait(false);" : ",";
                    string taskExpr = j == i
                        ? Enclose(Arguments[j - 1].TaskType, BracketType.Parentheses) + "null!"
                        : string.Format(CultureInfo.InvariantCulture, "Task.FromResult({0})", Arguments[j - 1].Value);
#>
                    <#= taskExpr + suffix #>
<#
                }
#>

<#
            }
#>
            // Success
            <#= GetResultTuple(parameterCount) #> = await MultiTask.WhenAll(
<#
            for (int i = 1; i <= parameterCount; i++)
            {
                string suffix = i == parameterCount ? ").ConfigureAwait(false);" : ",";
#>
                <#= string.Format(CultureInfo.InvariantCulture, "Task.FromResult({0})", Arguments[i - 1].Value) + suffix #>
<#
            }
#>

<#
            for (int i = 1; i <= parameterCount; i++)
            {
                int maxSize = Arguments.Take(parameterCount).Select(x => x.Value.Length).Max();
#>
            Assert.AreEqual(<#= Arguments[i - 1].Value.PadRight(maxSize) #>, value<#= i #>);
<#
            }
#>
        }
<#
            // Avoid extra newlines
            if (parameterCount < Arguments.Count)
            {
#>

<#
            }
        }
#>
    }
}
<#+
public IReadOnlyList<(string TaskType, string ValueType, string Value)> Arguments = new List<(string, string, string)>
{
    ("Task<int>"     , "int"     ,"42"),
    ("Task<string>"  , "string"  ,"\"Hello World\""),
    ("Task<TimeSpan>", "TimeSpan","TimeSpan.FromHours(3)"),
    ("Task<double>"  , "double"  ,"3.14d"),
    ("Task<long>"    , "long"    ,"100L"),
    ("Task<char>"    , "char"    ,"'a'"),
    ("Task<Guid>"    , "Guid"    ,"Guid.Parse(\"56128c75-379f-4c24-ac02-7ceb335807af\")"),
    ("Task<sbyte>"   , "sbyte"   ,"(sbyte)-3")
};

public string GetResultTuple(int count)
    => Enclose(
        string.Join(", ", Arguments.Take(count).Select((x, i) => x.ValueType + " value" + (i + 1))),
        BracketType.Parentheses);
#>
