<#@ template hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ include file="$(MSBuildProjectDirectory)\TextTemplating\Include.t4" #><# PrintHeader(); #>

using System.Threading.Tasks;

namespace Sweetener
{
<#
    for (int parameterCount = 0; parameterCount <= MaxDelegateParameters; parameterCount++)
    {
        string arguments      = GetArguments (parameterCount);
        string parameters     = GetParameters(parameterCount);
        string typeParameters = Enclose(GetInputTypeParameters(parameterCount, contravariant: true), BracketType.AngleBrackets);
#>
    /// <summary>
    /// Encapsulates an asynchronous method that has <#= GetWord(parameterCount) #> parameter<#= parameterCount == 1 ? string.Empty : "s" #> and does not return a value.
    /// </summary>
    /// <remarks>
    /// The <see cref="Task"/> returned by the encapsulated method is expected to have been started.
    /// Otherwise, callers will not be able to properly <see langword="await"/> the results of the operation.
    /// </remarks>
<#
        PrintDelegateTypeParamsXmlDoc(parameterCount, indent: 1, includeResult: false);
        PrintDelegateParamsXmlDoc(parameterCount, indent: 1);
#>
    /// <returns>A task that represents the asynchronous operation.</returns>
    public delegate Task AsyncAction<#= typeParameters #>(<#= parameters #>);
<#
        // Avoid extra newlines
        if (parameterCount < MaxDelegateParameters)
        {
#>

<#
        }
    }
#>
}
